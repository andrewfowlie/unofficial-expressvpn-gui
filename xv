#!/usr/bin/env python3
"""
ExpressVPN GUI
==============
"""

from enum import Enum
from subprocess import run, Popen, PIPE, STDOUT
import PySimpleGUI as sg


FONT = ('Ubuntu 18')
STATUS = Enum('Status', ['CONNECTED', 'CONNECTING', 'DISCONNECTED'])
COLOR = {STATUS.CONNECTED: "green", STATUS.DISCONNECTED: "red", STATUS.CONNECTING: "orange"}
TOGGLE = {STATUS.CONNECTED: "Disconnect", STATUS.DISCONNECTED: "Connect", STATUS.CONNECTING: "Cancel"}


def expressvpn(*cmd, background=False):
    cmds = " ".join(cmd)
    if background:
        return Popen(f"expressvpn {cmds}", shell=True)
    res = run(f"expressvpn {cmds}", shell=True, universal_newlines=True, stdout=PIPE, stderr=STDOUT)
    return res.stdout.strip("\n").strip()

def parse(line):
    words = [w.strip() for w in line.split("\t") if w.strip()]
    return words[0], words[-1]

def locs():
    lines = expressvpn("ls").split("\n")[3:-3]
    pairs = [parse(line) for line in lines]
    return map(list, zip(*pairs))

def status():
    return expressvpn("status").split("\n", maxsplit=1)[0].strip()

def parse_status(status_):
    if status_.startswith("Not"):
        return STATUS.DISCONNECTED
    if "Connected to" in status_:
        return STATUS.CONNECTED
    return STATUS.CONNECTING

def status_text(status_, parsed):
    if parsed == STATUS.CONNECTED:
        return status_[10:]
    if parsed == STATUS.CONNECTING:
        return status_[10:-4]
    return status_

if __name__ == "__main__":

    keys, descriptors = locs()
    status_ = status()
    parsed = parse_status(status_)

    txt = sg.Text(status_text(status_, parsed),
                  font=FONT,
                  background_color=COLOR[parsed],
                  justification="center",
                  key="txt")

    button = sg.Button(TOGGLE[parsed],
                       font=FONT,
                       key="toggle")

    choice = sg.Combo(descriptors,
                      default_value=descriptors[0],
                      font=FONT,
                      readonly=True,
                      key="loc")

    column = sg.Column([[txt], [button, choice]],
                        vertical_alignment='center',
                        justification='center',
                        background_color=COLOR[parsed],
                        key='frame')

    window = sg.Window("xv", [[column]], finalize=True)
    window['frame'].expand(True, True, True)
    window['txt'].expand(True, True, True)

    while True:

        status_ = status()
        parsed = parse_status(status_)
        window['loc'].ParentRowFrame.config(background=COLOR[parsed])
        window['toggle'].ParentRowFrame.config(background=COLOR[parsed])
        window['txt'].ParentRowFrame.config(background=COLOR[parsed])
        window['frame'].Widget.config(background=COLOR[parsed])
        window['frame'].Widget.config(highlightbackground=COLOR[parsed])
        window['frame'].Widget.config(highlightcolor=COLOR[parsed])
        window["txt"].update(status_text(status_, parsed), background_color=COLOR[parsed])
        window["toggle"].update(TOGGLE[parsed])

        event, values = window.read(timeout=1)

        if event == "toggle":

            if parsed != STATUS.DISCONNECTED:
                expressvpn("disconnect")
            else:
                loc = keys[descriptors.index(values["loc"])]
                expressvpn("connect", loc, background=True)

        elif event == sg.WINDOW_CLOSED:
            break
